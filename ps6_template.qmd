---
title: "Problem Set 6 - Waze Shiny Dashboard"
author: "Peter Ganong, Maggie Shi, and Andre Oviedo"
date: today
format: 
  pdf:
    include-in-header: 
       text: |
         \usepackage{fvextra}
         \DefineVerbatimEnvironment{Highlighting}{Verbatim}{breaklines,commandchars=\\\{\}}
include-before-body:
  text: |
    \RecustomVerbatimEnvironment{verbatim}{Verbatim}{
      showspaces = false,
      showtabs = false,
      breaksymbolleft={},
      breaklines
    }
---
1. **ps6:** Due Sat 23rd at 5:00PM Central. Worth 100 points (80 points from questions, 10 points for correct submission and 10 points for code style) + 10 extra credit. 

We use (`*`) to indicate a problem that we think might be time consuming. 

# Steps to submit (10 points on PS6) {-}

1. "This submission is my work alone and complies with the 30538 integrity
policy." Add your initials to indicate your agreement: \*\*\_\_\*\*
2. "I have uploaded the names of anyone I worked with on the problem set **[here](https://docs.google.com/forms/d/185usrCREQaUbvAXpWhChkjghdGgmAZXA3lPWpXLLsts/edit)**"  \*\*\_\_\*\* (2 point)
3. Late coins used this pset: \*\*\_\_\*\* Late coins left after submission: \*\*\_\_\*\*

4. Before starting the problem set, make sure to read and agree to the terms of data usage for the Waze data [here](https://canvas.uchicago.edu/courses/59054/quizzes/130617).

5. Knit your `ps6.qmd` as a pdf document and name it `ps6.pdf`.
6. Push your `ps6.qmd`, `ps6.pdf`, `requirements.txt`, and all created folders (we will create three Shiny apps so you will have at least three additional folders) to your Github repo (5 points). It is fine to use Github Desktop.
7. Submit `ps6.pdf` and also link your Github repo via Gradescope (5 points)
8. Tag your submission in Gradescope. For the Code Style part (10 points) please tag the whole correspondingsection for the code style rubric.

*Notes: see the [Quarto documentation (link)](https://quarto.org/docs/authoring/figures.html) for directions on inserting images into your knitted document.*

*IMPORTANT: For the App portion of the PS, in case you can not arrive to the expected functional dashboard we will need to take a look at your `app.py` file. You can use the following code chunk template to "import" and print the content of that file. Please, don't forget to also tag the corresponding code chunk as part of your submission!*

```{python}
#| echo: true
#| eval: false

def print_file_contents(file_path):
    """Print contents of a file."""
    try:
        with open(file_path, 'r') as f:
            content = f.read()
            print("```python")
            print(content)
            print("```")
    except FileNotFoundError:
        print("```python")
        print(f"Error: File '{file_path}' not found")
        print("```")
    except Exception as e:
        print("```python") 
        print(f"Error reading file: {e}")
        print("```")

print_file_contents("./top_alerts_map_byhour/app.py") # Change accordingly
```

```{python} 
#| echo: false

# Import required packages.
import pandas as pd
import altair as alt 
alt.renderers.enable("mimetype")
import pandas as pd
from datetime import date
import numpy as np
alt.data_transformers.disable_max_rows() 

import zipfile
import os

import json
```

# Background {-}

## Data Download and Exploration (20 points){-} 

1. 

```{python}


# Define the path to the zip file and the target directory
zip_file_path = r"C:\Users\madig\Documents\Github\Year 2024-2025\Genevieve_PS6\waze_data.zip"
extract_to_path = r"C:\Users\madig\Documents\Github\Year 2024-2025\Genevieve_PS6"

# Unzip the file
with zipfile.ZipFile(zip_file_path, 'r') as zip_ref:
    zip_ref.extractall(extract_to_path)

print("Unzipping completed.")

```

```{python}


# Load the sample data directly without specifying the full path
waze_sample = pd.read_csv("waze_data_sample.csv")

# Display variable names and data types
print("Variable Names and Data Types:")
print(waze_sample.dtypes)

print("\nSample Data:")
print(waze_sample.head())

```

Connected to base (Python 3.11.7)

Unzipping completed.
Variable Names and Data Types:
Unnamed: 0        int64
city             object
confidence        int64
nThumbsUp       float64
street           object
uuid             object
country          object
type             object
subtype          object
roadType          int64
reliability       int64
magvar            int64
reportRating      int64
ts               object
geo              object
geoWKT           object
dtype: object



2. 

```{python}


# Load the full dataset using just the file name
waze_data_full = pd.read_csv("waze_data.csv")

# Calculate null and non-null counts
null_counts_full = waze_data_full.isnull().sum()
non_null_counts_full = waze_data_full.notnull().sum()

# Prepare data for visualization
stacked_data_full = pd.DataFrame({
    "Variable": waze_data_full.columns,
    "Missing": null_counts_full.values,
    "Not Missing": non_null_counts_full.values
}).melt(id_vars=["Variable"], var_name="Category", value_name="Count")

# Create the stacked bar chart
chart_full = alt.Chart(stacked_data_full).mark_bar().encode(
    x=alt.X("Variable:N", title="Variable Names"),
    y=alt.Y("Count:Q", title="Count of Observations"),
    color=alt.Color("Category:N", title="Category", scale=alt.Scale(domain=["Missing", "Not Missing"], range=["red", "green"]))
).properties(
    title="Stacked Bar Chart of Missing and Non-Missing Values (Full Data)",
    width=800,
    height=400
)

# Display the chart
chart_full

```

nThumbUp seems to have the highest null

Street and subtype also have null
3. 

```{python}

# Reload the full dataset
waze_data_full = pd.read_csv("waze_data.csv")

# Unique values for 'type' and 'subtype'
unique_types = waze_data_full['type'].unique()
unique_subtypes = waze_data_full['subtype'].unique()

# Count how many 'subtype' values are NA for each 'type'
types_with_na_subtypes = waze_data_full[waze_data_full['subtype'].isna()]['type'].unique()
na_subtype_counts = waze_data_full['subtype'].isna().sum()

# Display unique combinations of type and subtype
type_subtype_combinations = waze_data_full[['type', 'subtype']].drop_duplicates()

# Summarize potential hierarchy for readable names
type_hierarchy = type_subtype_combinations.groupby('type')['subtype'].apply(list).to_dict()

# Print results
print("Unique Types:")
print(unique_types)
print("\nUnique Subtypes:")
print(unique_subtypes)
print("\nTypes with NA subtypes:")
print(types_with_na_subtypes)
print(f"\nNumber of observations where 'subtype' is NA: {na_subtype_counts}")
print("\nUnique combinations of 'type' and 'subtype':")
print(type_subtype_combinations)

# Display potential hierarchy
type_hierarchy

```

Unique Types:
['JAM' 'ACCIDENT' 'ROAD_CLOSED' 'HAZARD']

Unique Subtypes:
[nan 'ACCIDENT_MAJOR' 'ACCIDENT_MINOR' 'HAZARD_ON_ROAD'
 'HAZARD_ON_ROAD_CAR_STOPPED' 'HAZARD_ON_ROAD_CONSTRUCTION'
 'HAZARD_ON_ROAD_EMERGENCY_VEHICLE' 'HAZARD_ON_ROAD_ICE'
 'HAZARD_ON_ROAD_OBJECT' 'HAZARD_ON_ROAD_POT_HOLE'
 'HAZARD_ON_ROAD_TRAFFIC_LIGHT_FAULT' 'HAZARD_ON_SHOULDER'
 'HAZARD_ON_SHOULDER_CAR_STOPPED' 'HAZARD_WEATHER' 'HAZARD_WEATHER_FLOOD'
 'JAM_HEAVY_TRAFFIC' 'JAM_MODERATE_TRAFFIC' 'JAM_STAND_STILL_TRAFFIC'
 'ROAD_CLOSED_EVENT' 'HAZARD_ON_ROAD_LANE_CLOSED' 'HAZARD_WEATHER_FOG'
 'ROAD_CLOSED_CONSTRUCTION' 'HAZARD_ON_ROAD_ROAD_KILL'
 'HAZARD_ON_SHOULDER_ANIMALS' 'HAZARD_ON_SHOULDER_MISSING_SIGN'
 'JAM_LIGHT_TRAFFIC' 'HAZARD_WEATHER_HEAVY_SNOW' 'ROAD_CLOSED_HAZARD'
 'HAZARD_WEATHER_HAIL']

Types with NA subtypes:
['JAM' 'ACCIDENT' 'ROAD_CLOSED' 'HAZARD']

Number of observations where 'subtype' is NA: 96086

Unique combinations of 'type' and 'subtype':
               type                             subtype
0               JAM                                 NaN
...
38546           JAM                   JAM_LIGHT_TRAFFIC
44216        HAZARD           HAZARD_WEATHER_HEAVY_SNOW
54556   ROAD_CLOSED                  ROAD_CLOSED_HAZARD
229005       HAZARD                 HAZARD_WEATHER_HAIL

List with hierarchy

{'ACCIDENT': [nan, 'ACCIDENT_MAJOR', 'ACCIDENT_MINOR'],
 'HAZARD': [nan,
  'HAZARD_ON_ROAD',
  'HAZARD_ON_ROAD_CAR_STOPPED',
  'HAZARD_ON_ROAD_CONSTRUCTION',
  'HAZARD_ON_ROAD_EMERGENCY_VEHICLE',
  'HAZARD_ON_ROAD_ICE',
  'HAZARD_ON_ROAD_OBJECT',
  'HAZARD_ON_ROAD_POT_HOLE',
  'HAZARD_ON_ROAD_TRAFFIC_LIGHT_FAULT',
  'HAZARD_ON_SHOULDER',
  'HAZARD_ON_SHOULDER_CAR_STOPPED',
  'HAZARD_WEATHER',
  'HAZARD_WEATHER_FLOOD',
  'HAZARD_ON_ROAD_LANE_CLOSED',
  'HAZARD_WEATHER_FOG',
  'HAZARD_ON_ROAD_ROAD_KILL',
  'HAZARD_ON_SHOULDER_ANIMALS',
  'HAZARD_ON_SHOULDER_MISSING_SIGN',
  'HAZARD_WEATHER_HEAVY_SNOW',
  'HAZARD_WEATHER_HAIL'],
 'JAM': [nan,
  'JAM_HEAVY_TRAFFIC',
  'JAM_MODERATE_TRAFFIC',
  'JAM_STAND_STILL_TRAFFIC',
  'JAM_LIGHT_TRAFFIC'],
 'ROAD_CLOSED': [nan,
  'ROAD_CLOSED_EVENT',
  'ROAD_CLOSED_CONSTRUCTION',
  'ROAD_CLOSED_HAZARD']}


4. 

```{python}


```

1. 
```{python}


```

2. 

```{python}

```

3. 

```{python}

```

4. 

```{python}

```


# App #1: Top Location by Alert Type Dashboard (30 points){-}

1. 

a. 
```{python}

```

b. 
```{python}

```


c. 
```{python}

```

d. 
```{python}

```

3. 
    
a. 

```{python}

```
    

b. 
```{python}
# MODIFY ACCORDINGLY
file_path = "./top_alerts_map/chicago-boundaries.geojson"
#----

with open(file_path) as f:
    chicago_geojson = json.load(f)

geo_data = alt.Data(values=chicago_geojson["features"])

```

4. 

```{python}

```

5. 

a. 

```{python}

```

b. 
```{python}

```

c. 
```{python}

```

d. 
```{python}

```

e. 

# App #2: Top Location by Alert Type and Hour Dashboard (20 points) {-}

1. 

a. 


    
b. 
```{python}

```

c.

```{python}

```
    

2.

a. 



b. 


c. 


# App #3: Top Location by Alert Type and Hour Dashboard (20 points){-}

1. 


a. 

b. 

```{python}

```

2. 

a. 


b. 
    
3. 

a. 
    

b. 


c. 


d.
